generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement())
  first_name       String
  middle_name      String?
  last_name        String
  username         String               @unique
  password         String?
  email            String?              @unique
  lastLogin        DateTime?            @updatedAt
  avatar           String?
  about            String?
  role             Roles                @relation(fields: [rolesId], references: [id])
  materials        Materials[]
  rolesId          Int                  @default(1)
  groups           Groups[]
  enrolled_courses Courses[]            @relation("EnrolledCourses")
  courses_owned    Courses[]            @relation("CoursesOwners")
  TestTemplate     TestTemplate[]
  TestSettings     TestSettings[]
  assignUsers      UserAssign[]
  TestAssign       TestAssign[]
  answers_tasks    StudentAssignments[] @relation("Student")
  checking_task    StudentAssignments[] @relation("Reviewer")
}

model Roles {
  id                Int                 @id @default(autoincrement())
  code              String              @unique
  name              String              @unique
  User              User[]
  permissions       Permissions[]
  RegistrationLinks RegistrationLinks[]
}

model Permissions {
  id    Int     @id @default(autoincrement())
  code  String  @unique
  name  String  @unique
  roles Roles[]
}

model Groups {
  id                 Int                 @id @default(autoincrement())
  full_name          String              @unique // Полное название группы
  abbreviation       String?             @map("abbr") // Сокращенное название группы
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  parent             Groups?             @relation("parentId", fields: [parentId], references: [id])
  subgroups          Groups[]            @relation("parentId")
  parentId           Int?
  users              User[]
  TestAssign         TestAssign?         @relation(fields: [testAssignId], references: [id])
  testAssignId       Int?
  registration_links RegistrationLinks[]
}

model Categories {
  id      Int       @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Courses {
  id                Int          @id @default(autoincrement())
  name              String
  description       String?
  image_url         String?
  active            Boolean      @default(true)
  sections          Sections[]
  materials         Materials[]
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  starts_at         DateTime     @default(now())
  ends_at           DateTime?
  categories        Categories[]
  duration_hours    Int? // Количество часов
  course_owners     User[]       @relation("CoursesOwners")
  enrolled_students User[]       @relation("EnrolledCourses")
}

model Sections {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  unlocks_at      DateTime          @default(now())
  materials       Materials[]
  parent          Sections?         @relation("parentId", fields: [parentId], references: [id])
  subsections     Sections[]        @relation("parentId")
  parentId        Int?
  Courses         Courses?          @relation(fields: [coursesId], references: [id])
  coursesId       Int?
  section_content SectionContents[]
}

model SectionContents {
  id         Int         @id @default(autoincrement())
  title      String?
  content    String?
  materials  Materials[]
  urlItem    String?
  urlVideo   String?
  folders    Folders[]
  tasks      Tasks[]
  sections   Sections    @relation(fields: [sectionsId], references: [id])
  sectionsId Int
}

model Tasks {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  text               String?
  materials          Materials[]
  SectionContents    SectionContents?     @relation(fields: [sectionContentsId], references: [id])
  sectionContentsId  Int?
  StudentAssignments StudentAssignments[]
}

model StudentAssignments {
  id         Int         @id @default(autoincrement())
  task       Tasks       @relation(fields: [tasksId], references: [id])
  student    User        @relation("Student", fields: [userId], references: [id])
  materials  Materials[]
  submitted  DateTime    @default(now()) @updatedAt
  grade      Int?
  reviewer   User?       @relation("Reviewer", fields: [reviewerId], references: [id]) // Проверяющий пользователь
  reviewerId Int?
  tasksId    Int
  userId     Int
}

model Folders {
  id                Int              @id @default(autoincrement())
  name              String
  parent            Folders?         @relation("FolderTree", fields: [parentId], references: [id])
  parentId          Int?
  children          Folders[]        @relation("FolderTree")
  materials         Materials[]
  SectionContents   SectionContents? @relation(fields: [sectionContentsId], references: [id])
  sectionContentsId Int?
}

model Materials {
  id                   Int                 @id @default(autoincrement())
  name                 String
  description          String?
  mime_type            String?
  key                  String
  path                 String
  owner                User                @relation(fields: [userId], references: [id])
  size                 Int?
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  sections             Sections[]
  courses              Courses[]
  userId               Int
  section_contents     SectionContents[]
  Folder               Folders[]
  tasks                Tasks[]
  StudentAssignments   StudentAssignments? @relation(fields: [studentAssignmentsId], references: [id])
  studentAssignmentsId Int?
}

model RegistrationLinks {
  id               Int      @id @default(autoincrement())
  name             String
  description      String?
  token            String   @unique
  remaining_usages Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  role             Roles?   @relation(fields: [rolesId], references: [id])
  groups           Groups[]
  rolesId          Int?
}

// Тестирование:
model Subject {
  id                   Int                    @id @default(autoincrement())
  name                 String
  questions            Question[]
  parent               Subject?               @relation("ParentChild", fields: [parentId], references: [id])
  parentId             Int?
  children             Subject[]              @relation("ParentChild")
  TestTemplateSubjects TestTemplateSubjects[]
}

model Question {
  id            Int             @id @default(autoincrement())
  text          String
  type          QuestionTypes   @default(ONE_ANSWER)
  subjects      Subject?        @relation(fields: [subjectId], references: [id])
  answers       Answer[]
  level         Int?
  subjectId     Int?
  UserAssign    UserAssign[]
  UserQuestions UserQuestions[]
  hidden        Boolean         @default(false)
}

model Answer {
  id           Int         @id @default(autoincrement())
  content      String
  type         AnswerTypes @default(TEXT)
  correct      Boolean     @default(false)
  Question     Question?   @relation(fields: [questionId], references: [id])
  questionId   Int?
  exQuestionId Int?
}

model TestTemplate {
  id               Int                    @id @default(autoincrement())
  name             String
  author           User                   @relation(fields: [authorId], references: [id])
  authorId         Int
  TestAssign       TestAssign[]
  subjectsSettings TestTemplateSubjects[]
  // Subject          Subject[]
}

model TestTemplateSubjects {
  id                Int           @id @default(autoincrement())
  TestTemplate      TestTemplate? @relation(fields: [testTemplateId], references: [id])
  testTemplateId    Int?
  Subject           Subject       @relation(fields: [subjectId], references: [id])
  subjectId         Int
  subjectName       String
  initialDifficulty Int?
  totalQuestions    Int?
  threshold         Float?
}

model TestSettings {
  id               Int              @id @default(autoincrement())
  name             String
  author           User             @relation(fields: [authorId], references: [id])
  authorId         Int
  startTime        DateTime?
  endTime          DateTime?
  duration         Int?
  attemptsCount    Int?
  assessmentMethod AssessmentMethod @default(ADAPTIVE)
  TestAssign       TestAssign[]
}

model TestAssign {
  id             Int          @id @default(autoincrement())
  name           String
  authorId       Int
  author         User         @relation(fields: [authorId], references: [id])
  testTemplate   TestTemplate @relation(fields: [testTemplateId], references: [id])
  testTemplateId Int
  testSettings   TestSettings @relation(fields: [testSettingsId], references: [id])
  testSettingsId Int
  users          UserAssign[]
  Groups         Groups[]
}

model UserAssign {
  id              Int             @id @default(autoincrement())
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  assign          TestAssign      @relation(fields: [assignId], references: [id])
  assignId        Int
  status          AssignStatus    @default(NOT_PASSED)
  attempts        Int             @default(0)
  startTime       DateTime?
  endTime         DateTime?
  currentQuestion Question?       @relation(fields: [questionId], references: [id])
  questionId      Int?
  UserQuestions   UserQuestions[]
}

model UserQuestions {
  id           Int                   @id @default(autoincrement())
  userAssign   UserAssign            @relation(fields: [userAssignId], references: [id])
  userAssignId Int
  question     Question              @relation(fields: [questionId], references: [id])
  questionId   Int
  answerTime   DateTime              @default(now())
  level        Float
  answer       UserQuestionsAnswer[]
  correct      Boolean?
}

model UserQuestionsAnswer {
  id                Int            @id @default(autoincrement())
  content           String
  answeredContent   String?
  type              AnswerTypes    @default(TEXT)
  correct           Boolean        @default(false)
  selected          Boolean        @default(false)
  AnsweredCorrectly Boolean        @default(false)
  UserQuestions     UserQuestions? @relation(fields: [userQuestionsId], references: [id])
  userQuestionsId   Int?
}

enum QuestionTypes {
  ONE_ANSWER
  MANY_ANSWERS
  TEXT_ANSWER
}

enum AnswerTypes {
  TEXT
  IMAGE
  RICH
}

enum AssessmentMethod {
  ADAPTIVE
  STATISTICAL
}

enum AssignStatus {
  NOT_PASSED
  PASSED
}
