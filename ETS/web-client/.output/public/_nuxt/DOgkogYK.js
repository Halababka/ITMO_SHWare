import{u as a,a as d}from"./Bn8s6ksr.js";import{u as f}from"./BXRJdK4x.js";import{b as l,u as p}from"./7jZtv5KM.js";const h=d(),m=async(e=!1)=>{const s=l("courses",()=>{});return(!s.value||e)&&(s.value=await g()),s},g=async()=>{const e=(await p()).value,s={coursesData:[],pending:[],error:[],refresh:[]};if(a("token").value)try{const{data:t,pending:n,error:o,refresh:r}=f(`${h.public.apiBase}/users/${e.userData.id}/courses`,{onRequest({request:c,options:u}){u.headers=u.headers||{},u.headers.authorization=a("token").value}},"$q6mdPRbq4M");console.log("Сработала запрос на сервер courses"),s.coursesData=t,s.pending=n,s.error=o,s.refresh=r}catch(t){console.error(t)}return s},C=(e=null)=>{const s={name:"Без названия",imageUrl:null,description:"",startDate:"",endDate:"",categories:[],isActive:!0,duration_hours:null,enrolledStudents:[],courseOwners:[],sections:[{name:"Введение",open:!0,contents:[],editing:!1,subsections:[]},{name:"Секция 1",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 2",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 3",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 4",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 5",open:!1,contents:[],editing:!1,subsections:[]}]},t=o=>({name:o.name,imageUrl:o.image_url,description:o.description,startDate:o.starts_at,endDate:o.ends_at,categories:o.categories.map(r=>r.name),isActive:o.active,duration_hours:o.duration_hours,enrolledStudents:o.enrolled_students,courseOwners:o.course_owners,sections:o.sections.map(r=>({name:r.name,open:!1,contents:r.section_content||[],editing:!1,subsections:r.subsections?r.subsections.map(c=>({name:c.name,open:!1,contents:c.section_content||[],editing:!1})):[]}))});return l("editingCourse",()=>e?t(e):s)},D={name:"Без названия",imageUrl:null,description:"",startDate:"",endDate:"",categories:[],isActive:!0,duration_hours:null,enrolledStudents:[],courseOwners:[],sections:[{name:"Введение",open:!0,contents:[],editing:!1,subsections:[]},{name:"Секция 1",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 2",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 3",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 4",open:!1,contents:[],editing:!1,subsections:[]},{name:"Секция 5",open:!1,contents:[],editing:!1,subsections:[]}]},$=async(e=null,s=!1)=>{const t=l("courseId",()=>{});if(t.value&&console.log("courseId.value.id",t.value.id),!t.value||s||e){console.log("OK");try{const n=await b(e);n&&(t.value=await w(n))}catch(n){console.error("Failed to load course data:",n)}}return t},w=async(e=null)=>(e&&(e.starts_at=e.starts_at?e.starts_at.slice(0,-5):null,e.ends_at=e.ends_at?e.ends_at.slice(0,-5):null),console.log("data23",e),{id:e.id,name:e.name,imageUrl:e.image_url,description:e.description,startDate:e.starts_at,endDate:e.ends_at,categories:e.categories,isActive:e.active,duration_hours:e.duration_hours,enrolledStudents:e.enrolled_students,courseOwners:e.course_owners,sections:e.sections.map(s=>({id:s.id,name:s.name,open:!0,contents:s.section_content||[],editing:!1,subsections:s.subsections?s.subsections.map(t=>({id:t.id,name:t.name,open:!0,contents:t.section_content||[],editing:!1})):[]}))}),i=d(),E=async e=>{try{const s=await fetch(`${i.public.apiBase}/courses`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`${a("token").value}`},body:JSON.stringify(e)});if(!s.ok){const n=await s.json();throw{status:s.status,message:n.error||"Failed create course"}}return m(!0),await s.json()}catch(s){throw console.error("Error saving course:",s),s}},b=async e=>{try{const s=await fetch(`${i.public.apiBase}/courses/${e}`,{method:"GET",headers:{Authorization:`${a("token").value}`}});if(!s.ok){const n=await s.json();throw{status:s.status,message:n.error||"Failed fetch course"}}return await s.json()}catch(s){throw console.error("Error fetch course:",s),s}},k=async()=>{try{const e=await fetch(`${i.public.apiBase}/courses`,{method:"GET",headers:{Authorization:`${a("token").value}`}});if(!e.ok){const t=await e.json();throw{status:e.status,message:t.error||"Failed fetch course"}}return await e.json()}catch(e){throw console.error("Error fetch course:",e),e}},S=async e=>{try{const s=await fetch(`${i.public.apiBase}/courses`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`${a("token").value}`},body:JSON.stringify({ids:e})});if(!s.ok)throw new Error("Failed to delete Categories");return await s.json()}catch(s){throw console.error("Error deleting Categories:",s),s}},j=async(e,s)=>{try{const t=await fetch(`${i.public.apiBase}/courses/${e}`,{method:"PUT",headers:{Authorization:`${a("token").value}`,"Content-Type":"application/json"},body:JSON.stringify(s)});if(!t.ok)throw new Error("Failed to update course");return await t.json()}catch(t){throw console.error("Error deleting Categories:",t),t}};export{b as a,C as b,$ as c,S as d,j as e,k as f,D as i,E as s,m as u};
