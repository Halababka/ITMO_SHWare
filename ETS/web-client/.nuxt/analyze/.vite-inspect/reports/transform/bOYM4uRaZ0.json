{
  "resolvedId": "E:/Stusy/web-client/helpers/groups.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "interface Group {\r\n  id: string;\r\n  full_name: string;\r\n  abbreviation: string;\r\n  users?: object;\r\n  create_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nconst runtimeConfig = useRuntimeConfig();\r\n\r\nexport const formatGroupDates = (groups: Group[]): Group[] => {\r\n  groups.forEach(group => {\r\n    group.create_at = formatDate(group.create_at);\r\n    group.updated_at = formatDate(group.updated_at);\r\n  });\r\n  return groups;\r\n};\r\n\r\nconst formatDate = (dateString: string): string => {\r\n  const options = {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit'\r\n  };\r\n  const date = new Date(dateString);\r\n  // @ts-ignore\r\n  return date.toLocaleString('ru-RU', options);\r\n};\r\n\r\nexport const getGroupFullNames = (groups: Group[]) => {\r\n  return groups.map(group => group.abbreviation).join(', ');\r\n};\r\n\r\nexport const fetchGroups = async (): Promise<Group[]> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\r\n      headers: {\r\n        'Authorization': `${useCookie(\"token\").value}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch groups');\r\n    }\r\n\r\n    const data: Group[] = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching groups:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchGroupsWithUsers = async (): Promise<Group[]> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/allUsers`, {\r\n      headers: {\r\n        'Authorization': `${useCookie(\"token\").value}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch groups with users');\r\n    }\r\n\r\n    const data: Group[] = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching groups with users:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createGroup = async (groupData: Group): Promise<Group> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `${useCookie(\"token\").value}`\r\n      },\r\n      body: JSON.stringify(groupData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create group');\r\n    }\r\n\r\n    const data: Group = await response.json();\r\n    data.create_at = formatDate(data.create_at);\r\n    data.updated_at = formatDate(data.updated_at);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating group:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateGroup = async (groupId: number, groupData: Group): Promise<Group> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `${useCookie(\"token\").value}`\r\n      },\r\n      body: JSON.stringify(groupData)\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update group');\r\n    }\r\n\r\n    const updatedUser: Group = await response.json();\r\n    console.log(updatedUser)\r\n    return updatedUser;\r\n  } catch (error) {\r\n    console.error('Error updating group:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteGroups = async (selectedGroupsIds: number[]): Promise<any> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `${useCookie(\"token\").value}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        \"groupIds\": selectedGroupsIds\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete groups');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error deleting groups:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const deleteGroupUser = async (groupId: number, userIds: number[]): Promise<any> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users/`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `${useCookie(\"token\").value}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        \"userIds\": userIds\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete users in group');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error deleting users in group:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const addUsersToGroup = async (groupId: number, userIds: number[]): Promise<any> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `${useCookie('token').value}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        userIds,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to add users to group');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error adding users to group:', error);\r\n    throw error;\r\n  }\r\n};",
      "start": 1715794737514,
      "end": 1715794738232,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1715794738232,
      "end": 1715794738232,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1715794738232,
      "end": 1715794738232,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1715794738232,
      "end": 1715794738232,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1715794738232,
      "end": 1715794738232,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "const runtimeConfig = useRuntimeConfig();\nexport const formatGroupDates = (groups) => {\n  groups.forEach((group) => {\n    group.create_at = formatDate(group.create_at);\n    group.updated_at = formatDate(group.updated_at);\n  });\n  return groups;\n};\nconst formatDate = (dateString) => {\n  const options = {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n  };\n  const date = new Date(dateString);\n  return date.toLocaleString(\"ru-RU\", options);\n};\nexport const getGroupFullNames = (groups) => {\n  return groups.map((group) => group.abbreviation).join(\", \");\n};\nexport const fetchGroups = async () => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\n      headers: {\n        \"Authorization\": `${useCookie(\"token\").value}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch groups\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching groups:\", error);\n    throw error;\n  }\n};\nexport const fetchGroupsWithUsers = async () => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/allUsers`, {\n      headers: {\n        \"Authorization\": `${useCookie(\"token\").value}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch groups with users\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching groups with users:\", error);\n    throw error;\n  }\n};\nexport const createGroup = async (groupData) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${useCookie(\"token\").value}`\n      },\n      body: JSON.stringify(groupData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to create group\");\n    }\n    const data = await response.json();\n    data.create_at = formatDate(data.create_at);\n    data.updated_at = formatDate(data.updated_at);\n    return data;\n  } catch (error) {\n    console.error(\"Error creating group:\", error);\n    throw error;\n  }\n};\nexport const updateGroup = async (groupId, groupData) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${useCookie(\"token\").value}`\n      },\n      body: JSON.stringify(groupData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to update group\");\n    }\n    const updatedUser = await response.json();\n    console.log(updatedUser);\n    return updatedUser;\n  } catch (error) {\n    console.error(\"Error updating group:\", error);\n    throw error;\n  }\n};\nexport const deleteGroups = async (selectedGroupsIds) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `${useCookie(\"token\").value}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"groupIds\": selectedGroupsIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete groups\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error deleting groups:\", error);\n    throw error;\n  }\n};\nexport const deleteGroupUser = async (groupId, userIds) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users/`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `${useCookie(\"token\").value}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"userIds\": userIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete users in group\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error deleting users in group:\", error);\n    throw error;\n  }\n};\nexport const addUsersToGroup = async (groupId, userIds) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `${useCookie(\"token\").value}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to add users to group\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error adding users to group:\", error);\n    throw error;\n  }\n};\n",
      "start": 1715794738232,
      "end": 1715794738493,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "E:/Stusy/web-client/helpers/groups.ts"
        ],
        "sourcesContent": [
          "interface Group {\r\n  id: string;\r\n  full_name: string;\r\n  abbreviation: string;\r\n  users?: object;\r\n  create_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nconst runtimeConfig = useRuntimeConfig();\r\n\r\nexport const formatGroupDates = (groups: Group[]): Group[] => {\r\n  groups.forEach(group => {\r\n    group.create_at = formatDate(group.create_at);\r\n    group.updated_at = formatDate(group.updated_at);\r\n  });\r\n  return groups;\r\n};\r\n\r\nconst formatDate = (dateString: string): string => {\r\n  const options = {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit'\r\n  };\r\n  const date = new Date(dateString);\r\n  // @ts-ignore\r\n  return date.toLocaleString('ru-RU', options);\r\n};\r\n\r\nexport const getGroupFullNames = (groups: Group[]) => {\r\n  return groups.map(group => group.abbreviation).join(', ');\r\n};\r\n\r\nexport const fetchGroups = async (): Promise<Group[]> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\r\n      headers: {\r\n        'Authorization': `${useCookie(\"token\").value}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch groups');\r\n    }\r\n\r\n    const data: Group[] = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching groups:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchGroupsWithUsers = async (): Promise<Group[]> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/allUsers`, {\r\n      headers: {\r\n        'Authorization': `${useCookie(\"token\").value}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch groups with users');\r\n    }\r\n\r\n    const data: Group[] = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching groups with users:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createGroup = async (groupData: Group): Promise<Group> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `${useCookie(\"token\").value}`\r\n      },\r\n      body: JSON.stringify(groupData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create group');\r\n    }\r\n\r\n    const data: Group = await response.json();\r\n    data.create_at = formatDate(data.create_at);\r\n    data.updated_at = formatDate(data.updated_at);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating group:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateGroup = async (groupId: number, groupData: Group): Promise<Group> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `${useCookie(\"token\").value}`\r\n      },\r\n      body: JSON.stringify(groupData)\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update group');\r\n    }\r\n\r\n    const updatedUser: Group = await response.json();\r\n    console.log(updatedUser)\r\n    return updatedUser;\r\n  } catch (error) {\r\n    console.error('Error updating group:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteGroups = async (selectedGroupsIds: number[]): Promise<any> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `${useCookie(\"token\").value}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        \"groupIds\": selectedGroupsIds\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete groups');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error deleting groups:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const deleteGroupUser = async (groupId: number, userIds: number[]): Promise<any> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users/`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `${useCookie(\"token\").value}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        \"userIds\": userIds\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete users in group');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error deleting users in group:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const addUsersToGroup = async (groupId: number, userIds: number[]): Promise<any> => {\r\n  try {\r\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `${useCookie('token').value}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        userIds,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to add users to group');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error adding users to group:', error);\r\n    throw error;\r\n  }\r\n};"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1715794738493,
      "end": 1715794738493,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1715794738493,
      "end": 1715794738493,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1715794738493,
      "end": 1715794738493,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1715794738493,
      "end": 1715794738493,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715794738494,
      "end": 1715794738494,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1715794738494,
      "end": 1715794738494,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1715794738494,
      "end": 1715794738494,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1715794738494,
      "end": 1715794738495,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715794738495,
      "end": 1715794738495,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1715794738495,
      "end": 1715794738495,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1715794738495,
      "end": 1715794738495,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1715794738495,
      "end": 1715794738495,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1715794738495,
      "end": 1715794738495,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1715794738495,
      "end": 1715794738495,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1715794738496,
      "end": 1715794738496,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1715794738496,
      "end": 1715794738496,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1715794738496,
      "end": 1715794738496,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1715794738496,
      "end": 1715794738496,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1715794738496,
      "end": 1715794738500,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { useRuntimeConfig } from '#app/nuxt';\nimport { useCookie } from '#app/composables/cookie';\nconst runtimeConfig = useRuntimeConfig();\nexport const formatGroupDates = (groups) => {\n  groups.forEach((group) => {\n    group.create_at = formatDate(group.create_at);\n    group.updated_at = formatDate(group.updated_at);\n  });\n  return groups;\n};\nconst formatDate = (dateString) => {\n  const options = {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n  };\n  const date = new Date(dateString);\n  return date.toLocaleString(\"ru-RU\", options);\n};\nexport const getGroupFullNames = (groups) => {\n  return groups.map((group) => group.abbreviation).join(\", \");\n};\nexport const fetchGroups = async () => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\n      headers: {\n        \"Authorization\": `${useCookie(\"token\").value}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch groups\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching groups:\", error);\n    throw error;\n  }\n};\nexport const fetchGroupsWithUsers = async () => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/allUsers`, {\n      headers: {\n        \"Authorization\": `${useCookie(\"token\").value}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch groups with users\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching groups with users:\", error);\n    throw error;\n  }\n};\nexport const createGroup = async (groupData) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${useCookie(\"token\").value}`\n      },\n      body: JSON.stringify(groupData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to create group\");\n    }\n    const data = await response.json();\n    data.create_at = formatDate(data.create_at);\n    data.updated_at = formatDate(data.updated_at);\n    return data;\n  } catch (error) {\n    console.error(\"Error creating group:\", error);\n    throw error;\n  }\n};\nexport const updateGroup = async (groupId, groupData) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${useCookie(\"token\").value}`\n      },\n      body: JSON.stringify(groupData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to update group\");\n    }\n    const updatedUser = await response.json();\n    console.log(updatedUser);\n    return updatedUser;\n  } catch (error) {\n    console.error(\"Error updating group:\", error);\n    throw error;\n  }\n};\nexport const deleteGroups = async (selectedGroupsIds) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `${useCookie(\"token\").value}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"groupIds\": selectedGroupsIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete groups\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error deleting groups:\", error);\n    throw error;\n  }\n};\nexport const deleteGroupUser = async (groupId, userIds) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users/`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `${useCookie(\"token\").value}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"userIds\": userIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete users in group\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error deleting users in group:\", error);\n    throw error;\n  }\n};\nexport const addUsersToGroup = async (groupId, userIds) => {\n  try {\n    const response = await fetch(`${runtimeConfig.public.apiBase}/groups/${groupId}/users`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `${useCookie(\"token\").value}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to add users to group\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error adding users to group:\", error);\n    throw error;\n  }\n};\n",
      "start": 1715794738500,
      "end": 1715794738520,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1715794738520,
      "end": 1715794738520,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1715794738521,
      "end": 1715794738521,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1715794738521,
      "end": 1715794738521,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1715794738521,
      "end": 1715794738521,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1715794738522,
      "end": 1715794738522,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1715794738522,
      "end": 1715794738522,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1715794738522,
      "end": 1715794738523,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1715794738523,
      "end": 1715794738523,
      "order": "normal"
    }
  ]
}
